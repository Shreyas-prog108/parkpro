from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '35ea3651fe94'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('parkinglot', schema=None) as batch_op:
        batch_op.alter_column('id',
               existing_type=sa.BIGINT(),
               type_=sa.Integer(),
               existing_nullable=False,
               autoincrement=True)
        batch_op.alter_column('prime_location_name',
               existing_type=sa.TEXT(),
               type_=sa.String(length=255),
               nullable=False)
        batch_op.alter_column('price_per_hour',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               nullable=False)
        batch_op.alter_column('address',
               existing_type=sa.TEXT(),
               type_=sa.String(length=255),
               nullable=False)
        batch_op.alter_column('pin_code',
               existing_type=sa.BIGINT(),
               type_=sa.Integer(),
               nullable=False)
        batch_op.alter_column('number_of_spots',
               existing_type=sa.BIGINT(),
               type_=sa.Integer(),
               nullable=False)
        batch_op.create_unique_constraint('uq_parkinglot_id', ['id'])

    with op.batch_alter_table('reservation', schema=None) as batch_op:
        batch_op.alter_column('id',
               existing_type=sa.BIGINT(),
               type_=sa.Integer(),
               existing_nullable=False,
               autoincrement=True)
        batch_op.alter_column('user_id',
               existing_type=sa.BIGINT(),
               type_=sa.Integer(),
               nullable=False)
        batch_op.alter_column('spot_id',
               existing_type=sa.BIGINT(),
               type_=sa.Integer(),
               nullable=False)
        batch_op.alter_column('vehicle_id',
               existing_type=sa.BIGINT(),
               type_=sa.Integer(),
               existing_nullable=True)
        batch_op.alter_column('parking_timestamp',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True)
        batch_op.alter_column('leaving_timestamp',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True)
        batch_op.alter_column('parking_cost',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               nullable=False)

    with op.batch_alter_table('spot', schema=None) as batch_op:
        batch_op.alter_column('id',
               existing_type=sa.BIGINT(),
               type_=sa.Integer(),
               existing_nullable=False,
               autoincrement=True)
        batch_op.alter_column('status',
               existing_type=sa.TEXT(),
               type_=sa.String(length=20),
               nullable=False)
        batch_op.alter_column('lot_id',
               existing_type=sa.BIGINT(),
               type_=sa.Integer(),
               nullable=False)

    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.alter_column('id',
               existing_type=sa.BIGINT(),
               type_=sa.Integer(),
               existing_nullable=False,
               autoincrement=True)
        batch_op.alter_column('email',
               existing_type=sa.TEXT(),
               type_=sa.String(length=50),
               nullable=False)
        batch_op.alter_column('password',
               existing_type=sa.TEXT(),
               type_=sa.String(length=255),
               nullable=False)
        batch_op.alter_column('name',
               existing_type=sa.TEXT(),
               type_=sa.String(length=150),
               nullable=False)
        batch_op.alter_column('role',
               existing_type=sa.TEXT(),
               type_=sa.String(length=10),
               existing_nullable=True)
        batch_op.alter_column('pincode',
               existing_type=sa.BIGINT(),
               type_=sa.Integer(),
               nullable=False)
        batch_op.alter_column('address',
               existing_type=sa.TEXT(),
               type_=sa.String(length=255),
               nullable=False)
        batch_op.drop_index(batch_op.f('idx_16399_sqlite_autoindex_user_1'))
        batch_op.create_unique_constraint('uq_user_email', ['email'])

    with op.batch_alter_table('vehicle', schema=None) as batch_op:
        batch_op.alter_column('id',
               existing_type=sa.BIGINT(),
               type_=sa.Integer(),
               existing_nullable=False,
               autoincrement=True)
        batch_op.alter_column('number',
               existing_type=sa.TEXT(),
               type_=sa.String(length=20),
               nullable=False)
        batch_op.alter_column('user_id',
               existing_type=sa.BIGINT(),
               type_=sa.Integer(),
               nullable=False)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('vehicle', schema=None) as batch_op:
        batch_op.alter_column('user_id',
               existing_type=sa.Integer(),
               type_=sa.BIGINT(),
               nullable=True)
        batch_op.alter_column('number',
               existing_type=sa.String(length=20),
               type_=sa.TEXT(),
               nullable=True)
        batch_op.alter_column('id',
               existing_type=sa.Integer(),
               type_=sa.BIGINT(),
               existing_nullable=False,
               autoincrement=True)

    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.drop_constraint('uq_user_email', type_='unique')
        batch_op.create_index(batch_op.f('idx_16399_sqlite_autoindex_user_1'), ['email'], unique=True)
        batch_op.alter_column('address',
               existing_type=sa.String(length=255),
               type_=sa.TEXT(),
               nullable=True)
        batch_op.alter_column('pincode',
               existing_type=sa.Integer(),
               type_=sa.BIGINT(),
               nullable=True)
        batch_op.alter_column('role',
               existing_type=sa.String(length=10),
               type_=sa.TEXT(),
               existing_nullable=True)
        batch_op.alter_column('name',
               existing_type=sa.String(length=150),
               type_=sa.TEXT(),
               nullable=True)
        batch_op.alter_column('password',
               existing_type=sa.String(length=255),
               type_=sa.TEXT(),
               nullable=True)
        batch_op.alter_column('email',
               existing_type=sa.String(length=50),
               type_=sa.TEXT(),
               nullable=True)
        batch_op.alter_column('id',
               existing_type=sa.Integer(),
               type_=sa.BIGINT(),
               existing_nullable=False,
               autoincrement=True)

    with op.batch_alter_table('spot', schema=None) as batch_op:
        batch_op.alter_column('lot_id',
               existing_type=sa.Integer(),
               type_=sa.BIGINT(),
               nullable=True)
        batch_op.alter_column('status',
               existing_type=sa.String(length=20),
               type_=sa.TEXT(),
               nullable=True)
        batch_op.alter_column('id',
               existing_type=sa.Integer(),
               type_=sa.BIGINT(),
               existing_nullable=False,
               autoincrement=True)

    with op.batch_alter_table('reservation', schema=None) as batch_op:
        batch_op.alter_column('parking_cost',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               nullable=True)
        batch_op.alter_column('leaving_timestamp',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
        batch_op.alter_column('parking_timestamp',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
        batch_op.alter_column('vehicle_id',
               existing_type=sa.Integer(),
               type_=sa.BIGINT(),
               existing_nullable=True)
        batch_op.alter_column('spot_id',
               existing_type=sa.Integer(),
               type_=sa.BIGINT(),
               nullable=True)
        batch_op.alter_column('user_id',
               existing_type=sa.Integer(),
               type_=sa.BIGINT(),
               nullable=True)
        batch_op.alter_column('id',
               existing_type=sa.Integer(),
               type_=sa.BIGINT(),
               existing_nullable=False,
               autoincrement=True)

    with op.batch_alter_table('parkinglot', schema=None) as batch_op:
        batch_op.drop_constraint('uq_parkinglot_id', type_='unique')
        batch_op.alter_column('number_of_spots',
               existing_type=sa.Integer(),
               type_=sa.BIGINT(),
               nullable=True)
        batch_op.alter_column('pin_code',
               existing_type=sa.Integer(),
               type_=sa.BIGINT(),
               nullable=True)
        batch_op.alter_column('address',
               existing_type=sa.String(length=255),
               type_=sa.TEXT(),
               nullable=True)
        batch_op.alter_column('price_per_hour',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               nullable=True)
        batch_op.alter_column('prime_location_name',
               existing_type=sa.String(length=255),
               type_=sa.TEXT(),
               nullable=True)
        batch_op.alter_column('id',
               existing_type=sa.Integer(),
               type_=sa.BIGINT(),
               existing_nullable=False,
               autoincrement=True)

    # ### end Alembic commands ###
